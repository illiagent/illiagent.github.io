{"version":3,"sources":["Stopwatch.js","App.js","serviceWorker.js","index.js"],"names":["secA","secB","minA","minB","hoursA","hoursB","current","y","i","z","milSecA","milSecB","milSecC","lapsItems","Stopwatch","props","state","start","display","conditionPause","transformArrow","transformArrowSmall","lap","isStart","bind","lapRec","isPause","isStop","isReset","this","setState","seconds","setInterval","count","minutes","minCount","mili","miliSeconds","conditionStart","push","listItems","map","number","console","log","clearInterval","className","style","onClick","transform","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c5ffa079.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Stopwatch.css\";\n\nlet secA = 0;\nlet secB = 0;\nlet minA = 0;\nlet minB = 0;\nlet hoursA = 0;\nlet hoursB = 0;\nlet current = \"\";\nlet y = 0;\nlet i = 1;\nlet z = 0;\nlet milSecA = 0;\nlet milSecB = 0;\nlet milSecC = 0;\n\nlet lapsItems = [];\n\nclass Stopwatch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      start: \"start\",\n      display: \"00 : 00 : 00 : 000\",\n      conditionPause: { display: \"none\" },\n      transformArrow: \"\",\n      transformArrowSmall: \"\",\n      lap: lapsItems,\n    };\n    this.isStart = this.isStart.bind(this);\n    this.lapRec = this.lapRec.bind(this);\n    this.isPause = this.isPause.bind(this);\n    this.isStop = this.isStop.bind(this);\n    this.isReset = this.isReset.bind(this);\n  }\n\n  count() {\n    secA += 1;\n    if (secA > 9) {\n      secA = 0;\n      secB += 1;\n    } else if (secB > 5) {\n      secB = 0;\n      minA += 1;\n    } else if (minA > 9) {\n      minA = 0;\n      minB += 1;\n    } else if (minB > 9) {\n      minB = 0;\n      hoursA += 1;\n    }\n    y += 6;\n    this.setState({ transformArrow: \"rotate(\" + `${y}` + \"deg)\" });\n  }\n  miliSeconds() {\n    milSecA += 1;\n    if (milSecA > 9) {\n      milSecA = 0;\n      milSecB += 1;\n    } else if (milSecB > 9) {\n      milSecB = 0;\n      milSecC += 1;\n    } else if (milSecC > 9) {\n      milSecC = 0;\n    }\n    this.setState({ display: `${hoursB}${hoursA} : ${minB}${minA} : ${secB}${secA} : ${milSecA}${milSecB}${milSecC}` });\n    current = `${hoursB}${hoursA} : ${minB}${minA}  : ${secB}${secA} : ${milSecA}${milSecB}${milSecC}`;\n  }\n  minCount() {\n    z += 6;\n    this.setState({ transformArrowSmall: \"rotate(\" + `${z}` + \"deg)\" });\n  }\n\n  isStart() {\n    this.seconds = setInterval(() => this.count(), 1000);\n    this.minutes = setInterval(() => this.minCount(), 50);\n    this.mili = setInterval(() => this.miliSeconds(), 0.1);\n    this.setState({\n      conditionPause: { display: \"inline-block\" },\n    });\n    this.setState({\n      conditionStart: { display: \"none\" },\n    });\n  }\n\n  lapRec() {\n    current = (\n      <li>\n        lap â„–{i} {current}{\" \"}\n      </li>\n    );\n    lapsItems.push(current);\n    this.setState({ lapsItems });\n    let listItems = lapsItems.map((number) => <li>{number}</li>);\n    console.log(listItems);\n    i++;\n  }\n\n  isPause() {\n    clearInterval(this.seconds);\n    clearInterval(this.minutes);\n    clearInterval(this.mili);\n\n    this.setState({\n      conditionStart: { display: \"inline-block\" },\n      conditionPause: { display: \"none\" },\n    });\n    this.setState({ start: \"continue\" });\n  }\n\n  isStop() {\n    this.setState({ start: \"start\" });\n\n    this.setState({\n      conditionPause: { display: \"none\" },\n    });\n    this.setState({\n      conditionStart: { display: \"inline-block\" },\n    });\n    this.setState({ display: \"00 : 00 : 00 : 000\" });\n    clearInterval(this.seconds);\n    clearInterval(this.minutes);\n    clearInterval(this.mili);\n\n    current = \"\";\n    this.setState({ transformArrowSmall: \"rotate(0deg)\" });\n\n    this.setState({ transformArrow: \"rotate(0deg)\" });\n    z = 0;\n    y = 0;\n    i = 1;\n    secA = 0;\n    secB = 0;\n    minA = 0;\n    minB = 0;\n    hoursA = 0;\n    hoursB = 0;\n  }\n  isReset() {\n    lapsItems = [];\n    this.setState({ lap: lapsItems });\n    i = 1;\n  }\n\n  render() {\n    return (\n      <div className=\"Main\">\n        <div className=\"btns\">\n          <button style={this.state.conditionStart} onClick={this.isStart}>\n            {this.state.start}\n          </button>\n          <button style={this.state.conditionPause} onClick={this.isPause}>\n            pause\n          </button>\n        </div>\n        <button className=\"stop\" onClick={this.isStop}>\n          stop\n        </button>\n        <div className=\"display\">{this.state.display}</div>\n        <button className=\"lapBtn\" onClick={this.lapRec}>\n          lap\n        </button>\n        <button className=\"lapReset\" onClick={this.isReset}>\n          Reset\n        </button>\n        <div className=\"lapsResult\">\n          <ul>{this.state.lap}</ul>\n        </div>\n        <div className=\"arrow\" style={{ transform: this.state.transformArrow }}></div>\n        <div className=\"arrow-small\" style={{ transform: this.state.transformArrowSmall }}></div>\n      </div>\n    );\n  }\n}\nexport default Stopwatch;\n","import React from \"react\";\nimport \"./App.css\";\nimport Stopwatch from \"./Stopwatch\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Stopwatch />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}